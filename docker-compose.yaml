version: "3.9"

services:
  payments:
    build:
      context: .
      dockerfile: ./apps/payments/Dockerfile
      target: development 
    command: npm run start:dev:payments
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./apps/payments/.env
    ports:
      - "3003:3003" 
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  notifications:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
      target: development
    command: npm run start:dev:notifications
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./apps/notifications/.env
    ports:
      - "3004:3004"
      - "3004:3004/udp"  # For WebSocket
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"  # AMQP protocol port
      - "15672:15672"  # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-notifications}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-notifications}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
  rabbitmq_data:
